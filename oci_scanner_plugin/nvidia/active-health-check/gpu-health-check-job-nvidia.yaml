apiVersion: batch/v1
kind: Job
metadata:
  name: amd-gpu-healthcheck-all-nodes
  namespace: oci-monitoring
  labels:
    app: amd-gpu-healthcheck
    component: gpu-monitoring
spec:
  parallelism: 1
  completions: 1
  activeDeadlineSeconds: 7200
  backoffLimit: 0
  
  template:
    metadata:
      labels:
        app: amd-gpu-healthcheck
    spec:
      # Only run on nodes with AMD GPUs
      nodeSelector:
        kubernetes.io/arch: amd64  # Changed from kubernetes.io/arch: amd64
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu
                operator: Exists
      
      # Tolerations for AMD GPU nodes
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      
      # Security context
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      
      # Host networking for GPU access
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      
      # Anti-affinity to ensure pods run on different nodes
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - amd-gpu-healthcheck
            topologyKey: kubernetes.io/hostname
      
      containers:
      - name: amd-gpu-healthcheck
        image: iad.ocir.io/iduyx1qnmway/lens-metric-collector/oci_lens_healthcheck_amd:v0.0.2
        imagePullPolicy: Always
        
        # Security context for container
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_PTRACE
            - SYS_ADMIN
          seccompProfile:
            type: Unconfined
        
        # Resource limits
        resources:
          requests:
            memory: "8Gi"
            cpu: "2"
          limits:
            memory: "16Gi"
            cpu: "4"
        
        # Environment variables
        env:
        - name: HIP_PLATFORM
          value: "amd"
        - name: HSA_OVERRIDE_GFX_VERSION
          value: "10.3.0"
        - name: HIP_VISIBLE_DEVICES
          value: "all"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Command and arguments
        command: ["python3"]
        args:
        - "amd_functional_test.py"
        - "--dtype"
        - "float32"
        - "--expected_gpus"
        - "MI300:8"
        - "--matrix_size_mi300"
        - "16384"
        - "--functions"
        - "all"
        - "--output_dir"
        - "/app/testing_results"
        
        # Volume mounts
        volumeMounts:
        - name: testing-results
          mountPath: /app/testing_results
        - name: dev-kfd
          mountPath: /dev/kfd
        - name: dev-dri
          mountPath: /dev/dri
      
      # Volumes
      volumes:
      - name: testing-results
        hostPath:
          path: /var/log/amd-gpu-healthcheck
          type: DirectoryOrCreate
      - name: dev-kfd
        hostPath:
          path: /dev/kfd
          type: CharDevice
      - name: dev-dri
        hostPath:
          path: /dev/dri
          type: Directory
      
      # Don't restart on failure (let it die)
      restartPolicy: Never
      
      # Termination grace period
      terminationGracePeriodSeconds: 30