apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: oci-lens-plugin
  namespace: oci-monitoring
  labels:
    app: oci-lens-plugin
    component: gpu-monitoring
spec:
  selector:
    matchLabels:
      app: oci-lens-plugin
  template:
    metadata:
      labels:
        app: oci-lens-plugin
        component: gpu-monitoring
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: amd.com/gpu
                operator: In
                values: ["true", "present"]
  
      # Run on nodes with GPUs
      tolerations:
      - key: amd.com/gpu
        operator: Exists
        effect: NoSchedule
      
      # Use host networking for GPU access and instance metadata
      hostNetwork: true
      hostPID: true
      
      # Mount necessary host directories
      volumes:
      - name: dev
        hostPath:
          path: /dev
      - name: sys
        hostPath:
          path: /sys
      - name: proc
        hostPath:
          path: /proc
      - name: var-lib-dpkg
        hostPath:
          path: /var/lib/dpkg
      
      containers:
      - name: oci-lens-plugin
        image: iad.ocir.io/iduyx1qnmway/lens-metric-collector/oci_lens_metric_collector:v0.0.8  # Replace with your image registry
        imagePullPolicy: Always
        
        # Required environment variables
        env:
        - name: PUSH_GATEWAY
          value: "http://170.9.236.141:9091/" # Adjust URL
        - name: GPU_TYPE
          value: "amd"  # Let the app detect from /shared/gpu-type
        - name: PUSH_FREQUENCY
          value: "10"
        - name: JOB_NAME
          value: "oci_lens_node_metrics"
        
        # Optional environment variables
        - name: MAX_PASSES
          value: "0"  # 0 means run indefinitely
        - name: SLEEP_SECS
          value: "10"
        
        # Mount volumes
        volumeMounts:
        - name: dev
          mountPath: /dev
        - name: sys
          mountPath: /sys
        - name: proc
          mountPath: /proc
        - name: var-lib-dpkg
          mountPath: /var/lib/dpkg
          readOnly: true

        # Security context - needs elevated privileges for GPU access
        securityContext:
          runAsUser: 0                    # Run as root
          runAsGroup: 0                   # Root group
          runAsNonRoot: false             # Explicitly allow root
          privileged: true                # Enable privileged mode for GPU access
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: true 
          capabilities:
            add:
            - SYS_ADMIN      # Required for GPU metrics collection
            - NET_ADMIN      # Required for RDMA metrics
            - SYS_PTRACE     # Required for process monitoring
            - SYS_RAWIO      # Required for device access
        
        # Resource limits
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe
        livenessProbe:
          exec:
            command:
            - pgrep
            - -f
            - oci_lens_plugin
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          exec:
            command:
            - pgrep
            - -f
            - oci_lens_plugin
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Ports (if you want to expose metrics endpoint)
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        
        # Command to run with proper arguments
        command: ["./oci_lens_plugin"]
        args:
        - "--gateway=$(PUSH_GATEWAY)"
        - "--job=$(JOB_NAME)"
        - "--gpu-type=$(GPU_TYPE)"
        - "--sleep-secs=$(SLEEP_SECS)"
        - "--max-passes=$(MAX_PASSES)"

      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30