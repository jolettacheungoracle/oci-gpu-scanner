apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: oke-node-problem-detector
  namespace: kube-system
  labels:
    app: oke-node-problem-detector
spec:
  selector:
    matchLabels:
      app: oke-node-problem-detector
  template:
    metadata:
      labels:
        app: oke-node-problem-detector
    spec:
      nodeSelector:
        oci.oraclecloud.com/oke-node-problem-detector-enabled: "true"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
      containers:
        - args:
            - /node-problem-detector --logtostderr --prometheus-port=${PROMETHEUS_PORT}
              --prometheus-address 0.0.0.0 --config.system-log-monitor=/config/kernel-monitor.json,/config/readonly-monitor.json
              --config.custom-plugin-monitor=/node-problem-detector-custom-check/imds_reachability.json
              --config.custom-plugin-monitor=/node-problem-detector-gpu-check/dr-hpc.json
              --enable-k8s-exporter=true
          command:
            - /bin/sh
            - -c
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: PROMETHEUS_PORT
              value: "20257"
          image: phx.ocir.io/idnlixcmffxd/oke-public-node-problem-detector:v0.8.20.7@sha256:399b506dbfa5c33e60a247d0d3199f025d242b7a7480c956446e70eaa090c599
          imagePullPolicy: Always
          name: oke-node-problem-detector
          ports:
            - containerPort: 20257
              name: metrics
              protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 80Mi
            requests:
              cpu: 10m
              memory: 80Mi
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /var/log
              name: log
              readOnly: true
            - mountPath: /dev/kmsg
              name: kmsg
              readOnly: true
            - mountPath: /run/systemd/system
              name: systemd
            - mountPath: /var/run/dbus/
              mountPropagation: Bidirectional
              name: dbus
            - mountPath: /node-problem-detector-custom-check
              name: node-problem-detector-custom-check
              readOnly: true
            - mountPath: /node-problem-detector-gpu-check
              name: node-problem-detector-gpu-check
              readOnly: true
      serviceAccountName: oke-node-problem-detector-sa
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: oci.oraclecloud.com/oke-is-preemptible
          operator: Exists
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
        - effect: NoSchedule
          key: amd.com/gpu
          operator: Exists
        - effect: NoSchedule
          key: oci.oraclecloud.com/node-auto-repair-scheduled
          operator: Exists
      volumes:
        - hostPath:
            path: /home/ubuntu/oci-dr-hpc-v2/
          name: log
        - hostPath:
            path: /dev/kmsg
          name: kmsg
        - hostPath:
            path: /run/systemd/system/
          name: systemd
        - hostPath:
            path: /var/run/dbus/
          name: dbus
        - configMap:
            defaultMode: 493
            name: node-problem-detector-custom-check
          name: node-problem-detector-custom-check
        - configMap:
            defaultMode: 493
            name: node-problem-detector-gpu-check
          name: node-problem-detector-gpu-check

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-problem-detector-custom-check
  namespace: kube-system
data:
  imds_reachability.sh: |
    #!/bin/bash   
    URLS=(
      "http://169.254.169.254/opc/v2/identity/"
      "http://169.254.169.254/opc/v2/instance/"
      "http://169.254.169.254/opc/v2/vnics/"
    )
    
    CHECK_RESULT=0
    
    for url in "${URLS[@]}"; do
      HTTP_STATUS=$(curl -s --fail -H "Authorization: Bearer Oracle" -L0 -o /dev/null -w "%{http_code}" --max-time 10 "$url")
    
      if [[ "$HTTP_STATUS" != "200" ]]; then
        CHECK_RESULT=1
      fi  
    done
    
    if [[ ${CHECK_RESULT} == 0 ]]; then
      echo "IMDS is reachable"
      exit 0
    else
      echo "IMDS is unreachable"
      exit 1
    fi


  imds_reachability.json: |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invokeInterval": "30s",
        "timeout": "10s",
        "maxOutputLength": 80,
        "consecutiveFailureCount": 1
      },
      "source": "imds-reachability",
      "conditions": [
        {
          "type": "IMDSUnreachable",
          "status": "False",
          "reason": "IMDSCheckPassed",
          "message": "IMDS URL is reachable"
        }
      ],
      "rules": [
        {
          "type": "temporary",
          "condition": "IMDSUnreachable",
          "reason": "IMDSCheckFailed",
          "message": "IMDS URL is unreachable",
          "path": "/node-problem-detector-custom-check/imds_reachability.sh"
        }
      ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-problem-detector-gpu-check
  namespace: kube-system
data:
  dr_hpc_check.sh: |
    #!/bin/bash

    readonly OK=0
    readonly NONOK=1

    check_type=$1
    
    latest_remediation_json=$(ls -t /var/log/remediation_*.json 2>/dev/null | head -n 1)
    
    ERROR_MSG=$(jq -r --arg check_type "$check_type" '
      if (.critical_issues // 0) == 0 then
        empty
      else
        .recommendations[]
        | select(.type=="critical" and .test_name==$check_type)
        | "\(.fault_code): \(.issue)"
      end
    ' "${latest_remediation_json}")
    
    if [ -n "$ERROR_MSG" ]; then
      echo "$ERROR_MSG"
      exit $NONOK
    else
      echo "No issues detected"
      exit $OK
    fi

  dr-hpc.json: |
    {
      "plugin": "custom",
      "pluginConfig": {
        "invoke_interval": "30s",
        "timeout": "30s",
        "max_output_length": 300,
        "concurrency": 1,
        "enable_message_change_based_condition_update": true
      },
      "source": "dr-hpc",
      "conditions": [
        {
          "type": "GPUCount",
          "reason": "GPUCountCorrect",
          "message": "GPU count is correct."
        },
        {
          "type": "GPUClock",
          "reason": "SufficientGPUClockSpeed",
          "message": "GPU clock speed is sufficient."
        },
        {
          "type": "PCIeBus",
          "reason": "PCIeBusIsHealthy",
          "message": "PCIe bus is healthy."
        },
        {
          "type": "PCIeLanes",
          "reason": "PCIeLanesCorrect",
          "message": "PCIe lanes are correct."
        },
        {
          "type": "RDMALinkCount",
          "reason": "RDMALinkCountCorrect",
          "message": "RDMA link count is correct."
        },        
        {
          "type": "RxDiscards",
          "reason": "RxDiscardsUnderThreshold",
          "message": "Rx discards is under threshold."
        },
        {
          "type": "GIDIndex",
          "reason": "GIDIndexWithinRange",
          "message": "GID index is within the range."
        },
        {
          "type": "RDMALink",
          "reason": "RDMALinksHealthy",
          "message": "RDMA links are healthy."
        },
        {
          "type": "ETHLink",
          "reason": "ETHLinkHealthy",
          "message": "ETH link is healthy."
        },
        {
          "type": "RDMALinkAuth",
          "reason": "RDMALinksAuthenticated",
          "message": "RDMA links are authenticated."
        },
        {
          "type": "GPUSRAM",
          "reason": "GPUSRAMHealthy",
          "message": "GPU SRAM is healthy."
        },
        {
          "type": "GPUDriver",
          "reason": "GPUDriverVersionSupported",
          "message": "GPU driver version is supported."
        },
        {
          "type": "ETH0Check",
          "reason": "ETH0IsPresent",
          "message": "ETH0 is present."
        },
        {
          "type": "CDFPCable",
          "reason": "CDFPCableConnected",
          "message": "CDFP cable is connected."
        },
        {
          "type": "HCACheck",
          "reason": "NoHCAMLXErrors",
          "message": "No HCAMLX errors."
        },
        {
          "type": "PCIeInterface",
          "reason": "AllPCIeInterfacesDetected",
          "message": "All PCIe interfaces are detected."
        },
        {
          "type": "GPURowRemap",
          "reason": "GPUMemoryRowRemapHealthy",
          "message": "GPU memory row remap is healthy."
        },
        {
          "type": "GPUThermal",
          "reason": "GPUThermalTempsNormal",
          "message": "GPU thermal temperatures are normal."
        },
        {
          "type": "SourceRouting",
          "reason": "SourceRoutingCorrect",
          "message": "Source routing is correct."
        },
        {
          "type": "OCAVersion",
          "reason": "OCAVersionCorrect",
          "message": "OCA version is correct."
        },
        {
          "type": "RDMALinkFlap",
          "reason": "NoFlappingRDMALinks",
          "message": "No flapping RDMA links."
        },
        {
          "type": "RDMANicSpeed",
          "reason": "RDMANicSpeedsExpected",
          "message": "RDMA Nic speeds are expected."
        },
        {
          "type": "RDMALinkSpeed",
          "reason": "RDMALinkSpeedsExpected",
          "message": "RDMA link speeds are expected."
        },
        {
          "type": "HPCMetadata",
          "reason": "HPCMetadataTagSet",
          "message": "HPC metadata tag is set."
        },
        {
          "type": "AdvancedRDMA",
          "reason": "RDMALinkPerformanceHealthy",
          "message": "RDMA link performance is healthy."
        },
        {
          "type": "XGMILink",
          "reason": "XGMILinksHealthy",
          "message": "XGMI links are healthy."
        },
        {
          "type": "GPUMemory",
          "reason": "GPUMemoryHealthy",
          "message": "GPU memory is healthy."
        }
      ],
      "rules": [
        {
          "type": "permanent",
          "condition": "GPUCount",
          "reason": "GPUCountMismatch",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "gpu_count_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GPUClock",
          "reason": "SlowGPUClockSpeed",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "gpu_clk_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "PCIeBus",
          "reason": "PCIeBusErrorsDetected",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "pcie_error_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "PCIeLanes",
          "reason": "PCIeLanesMissingOrMalfunctioning",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "pcie_width_missing_lanes_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMALinkCount",
          "reason": "RDMALinkCountMismatch",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "rdma_nic_count" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RxDiscards",
          "reason": "RxDiscardsExceedThreshold",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "rx_discards_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GIDIndex",
          "reason": "GIDIndexOutsideRange",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "gid_index_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMALink",
          "reason": "UnexpectedRDMALinkParameterValues",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "link_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "ETHLink",
          "reason": "UnexpectedETHLinkParameterValues",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "eth_link_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMALinkAuth",
          "reason": "RDMALinksFailedAuthentication",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "auth_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GPUSRAM",
          "reason": "GPUSRAMMemoryCorruption",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "sram_error_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GPUDriver",
          "reason": "GPUDriverVersionNotSupported",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "gpu_driver_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "ETH0Check",
          "reason": "ETH0IsMissing",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "eth0_presence_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "CDFPCable",
          "reason": "CDFPCableConnectionMismatch",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "cdfp_cable_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "HCACheck",
          "reason": "HCAMLXErrorsDetected",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "hca_error_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "PCIeInterface",
          "reason": "PCIeInterfacesMissing",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "missing_interface_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GPURowRemap",
          "reason": "GPURowRemapFailuresDetected",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "row_remap_error_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "GPUThermal",
          "reason": "GPUThermalThrottling",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "thermal_throttling_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "SourceRouting",
          "reason": "SourceRoutingMisconfiguration",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "source_based_routing_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "OCAVersion",
          "reason": "IncorrectOCAVersionInstalled",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "oca_version_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMALinkFlap",
          "reason": "RDMALinksFlapping",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "rdma_link_flap_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMANicSpeed",
          "reason": "RDMANicSpeedsSuboptimal",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "pcie_speed_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "RDMALinkSpeed",
          "reason": "RDMALinkSpeedsSuboptimal",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "walk_pcie_check" ],
          "timeout": "30s"
        },        
        {
          "type": "permanent",
          "condition": "HPCMetadata",
          "reason": "HPCMetadataTagIncorrect",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "hpc_info_check" ],
          "timeout": "30s"
        },
        {
          "type": "permanent",
          "condition": "AdvancedRDMA",
          "reason": "RDMALinkPerformanceDegraded",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "advanced_link_check" ],
          "timeout": "30s"
        },        
        {
          "type": "permanent",
          "condition": "XGMILink",
          "reason": "XGMILinkCommunicationDegraded",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "xgmi_check" ],
          "timeout": "30s"
        },        
        {
          "type": "permanent",
          "condition": "GPUMemory",
          "reason": "BadGPUMemoryPages",
          "path": "/node-problem-detector-gpu-check/dr_hpc_check.sh",
          "args": [ "bad_page_check" ],
          "timeout": "30s"
        }
      ]
    }

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oke-node-problem-detector-sa
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oke-npd-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node-problem-detector
subjects:
  - kind: ServiceAccount
    name: oke-node-problem-detector-sa
    namespace: kube-system
